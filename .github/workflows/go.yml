name: Build, Test and Release

on:
  push:
    branches:
      - main
      - '**'
    tags:
      - v*.*.*
  pull_request:
    branches:
      - main

jobs:

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      GO_LDFLAGS: "-w -s"
      GO11MODULE: "on"
      GINKGO_FLAGS: "--randomizeAllSpecs --randomizeSuites --failOnPending --trace --race --progress --compilers=2 --nodes=2"

    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2

      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg
          key: ${{ runner.os }}-build-${{ runner.arch }}

      - name: Set up Go
        uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57 # renovate: tag=v2
        with:
          go-version: 1.17

      - name: Build Binary
        run: |
          make generate
          if ! git diff --exit-code --name-only; then
            git diff
            echo 'Run "make generate" and add generated changes to this PR'
            exit 1
          fi
          # Build kubecfg
          make all
        env:
          VERSION: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || github.sha }}

      - name: Info Binary
        run: |
          #ldd ./kubecfg || otool -L ./kubecfg # What's the purpose of this ? it currently fail since we don't produce a dynamic executable
          ./kubecfg help
          ./kubecfg version

      - name: Test Binary
        run: |
          make test
          make vet

      # Only run integration on linux matrix job
      - name: Create k8s Kind Cluster
        uses:  engineerd/setup-kind@v0.5.0
        if: matrix.os == 'ubuntu-latest'
        with:
          version: "v0.11.1"
          image: "kindest/node:v1.20.7@sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9"

      - name: Integration Testing
        if: matrix.os == 'ubuntu-latest'
        run: |
          go get github.com/onsi/ginkgo/ginkgo@$(go list -f '{{.Version}}' -m github.com/onsi/ginkgo)
          #make integrationtest GINKGO="ginkgo $GINKGOFLAGS"

      - name: Upload kubecfg artifact
        uses: actions/upload-artifact@v2
        with:
          name: kubecfg_${{ runner.os }}_${{ runner.arch }}
          path: kubecfg
          retention-days: 5

  create_release: 
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }} 
    
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

  release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs: create_release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download kubecfg artifact
        uses: actions/download-artifact@v2
        with:
          name: kubecfg_${{ runner.os }}_${{ runner.arch }}
      - name: Upload assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: kubecfg
          asset_name: kubecfg_${{ runner.os }}_${{ runner.arch }}

